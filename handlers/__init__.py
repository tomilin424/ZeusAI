# handlers/__init__.py
import httpx
from openai import OpenAI
from telebot import types
from config import OPENAI_API_KEY, PROXY_URL
from .voice import register_voice_handler

print(f"Debug: Creating HTTP client with proxy: {PROXY_URL}")

http_client = httpx.Client(
    proxies={
        "http://": PROXY_URL,
        "https://": PROXY_URL
    },
    verify=False,
    timeout=30.0,
    follow_redirects=True
)

client = OpenAI(
    api_key=OPENAI_API_KEY,
    http_client=http_client,
    max_retries=5
)

def setup_handlers(bot, user_messages, user_message_ids):
    @bot.message_handler(commands=['start'])
    def start(message):
        markup = types.InlineKeyboardMarkup()
        webapp_btn = types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å ZeusAI",
            web_app=types.WebAppInfo(url="https://zeus-ai.vercel.app")  # –í–∞—à URL —Å Vercel
        )
        markup.add(webapp_btn)
        
        welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZeusAI!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
    """
        
        bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: message.text == "üí¨ –ù–æ–≤—ã–π —á–∞—Ç")
    def new_chat(message):
        chat_number = len(user_messages.get(message.chat.id, [])) // 2 + 1
        user_messages[message.chat.id] = []
        
        bot.reply_to(
            message, 
            f"‚ú® –ß–∞—Ç #{chat_number} –Ω–∞—á–∞—Ç\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )

    @bot.message_handler(func=lambda message: message.text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    def voice_mode(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back_button = types.KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(back_button)
        
        bot.send_message(
            message.chat.id,
            "üé§ –†–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    def settings(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        model_button = types.KeyboardButton("ü§ñ –ú–æ–¥–µ–ª—å AI")
        lang_button = types.KeyboardButton("üåê –Ø–∑—ã–∫")
        back_button = types.KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(model_button, lang_button)
        markup.add(back_button)
        
        bot.send_message(
            message.chat.id,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ZeusAI\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    def back_to_main(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        voice_button = types.KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        new_chat_button = types.KeyboardButton("üí¨ –ù–æ–≤—ã–π —á–∞—Ç")
        settings_button = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        markup.add(voice_button)
        markup.add(new_chat_button)
        markup.add(settings_button)
        
        bot.send_message(
            message.chat.id,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ZeusAI\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: True)
    def handle_message(message):
        try:
            if message.chat.id not in user_messages:
                user_messages[message.chat.id] = []
            
            user_messages[message.chat.id].append({"role": "user", "content": message.text})
            
            print("Debug: Sending request to OpenAI")
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=user_messages[message.chat.id]
            )
            
            reply = response.choices[0].message.content
            user_messages[message.chat.id].append({"role": "assistant", "content": reply})
            
            bot.reply_to(message, reply)
        except Exception as e:
            print(f"Debug: Error occurred: {str(e)}")
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(commands=['app'])
    def open_webapp(message):
        markup = types.InlineKeyboardMarkup()
        webapp_btn = types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å ZeusAI",
            web_app=types.WebAppInfo(url="URL_–í–ê–®–ï–ì–û_WEBAPP")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        )
        markup.add(webapp_btn)
        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å ZeusAI",
            reply_markup=markup
        )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    register_voice_handler(bot)